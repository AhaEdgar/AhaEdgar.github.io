<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[核心微服务-Configuration and Registry]]></title>
    <url>%2F2018%2F09%2F11%2FEdgeX-02-ConfigurationAndRegistry%2F</url>
    <content type="text"><![CDATA[EdgeX Foundry核心微服务-Configuration and Registry： Introduce to Configuration and Registry Core Services Microservices - Configuration Core Services Microservices - Registry 1. Introduce to Configuration and Registry配置和注册表的微服务提供集中式（即EdgeX Foundry-wide）管理 任何EdgeX Foundry微服务的配置和操作参数 EdgeX Foundry微服务的位置和状态 作为配置管理器，配置和注册表微服务在微服务启动时为每个微服务提供配置信息。此配置信息会覆盖微服务可能具有的任何内置配置，并提供满足微服务架构动态特性的方法。例如，配置和注册表微服务提供的配置信息可能会为另一个EdgeX Foundry微服务提供一个新的操作端口号，由于其默认端口号已被运行EdgeX Foundry的系统使用。配置和注册表微服务还提供了向EdgeX Foundry微服务通知配置更改的方法。这允许其他微服务动态地响应环境的变化。 作为EdgeX Foundry微服务注册表，配置和注册表微服务知道所有EdgeX Foundry微服务的位置和运行状态。当每个EdgeX Foundry微服务启动时，它被要求使用配置和注册表微服务注册自己。然后，配置和注册表微服务定期“ping”其他微服务，以准确了解微服务集合的健康状况。这为其他EdgeX Foundry微服务、系统管理系统和第三方应用程序提供了一个具有权威性的地方去获得EdgeX Foundry状态。 EdgeX Foundry微服务可以在没有配置和注册表微服务的情况下运行。当他们这样做时，他们使用内置配置初始化/配置自己并在本地而不是全局操作 - 也就是说，他们不会在任何中央机构或其他微服务中注册它们。如果没有配置和注册表微服务，每个其他微服务只能对位置（通过其自身的本地初始化提供）和其他微服务的运行状态做出假设。 2. 配置 ( Configuration )对于Configuration，Configuration and Registry微服务集中并简化了不断增长的服务配置数据。Configuration微服务以开源服务Consul为基础，提供Key和Value Store，客户可以通过RESTful API访问EdgeX Foundry。 有关更多信息，请参阅Consul官方网站：https： //www.consul.io 当每个微服务启动时，会发生一个特殊的“引导”阶段，以便加载自己的配置数据。在“引导”阶段，客户端微服务尝试通过RESTful API访问配置微服务，并遵循命名约定来检索自己的配置数据。此外，客户端微服务在本地准备默认配置文件。如果由于任何错误而无法访问配置微服务，则客户端微服务会不断重试。当Configuration微服务不可用时，客户端微服务无法启动并报告错误消息。 物理上，“配置”服务和“注册表”服务在同一个Consul服务器节点上组合并运行。 2.1 命名约定 ( Naming Convention ) 键/值存储 Configuration微服务利用Consul提供的Key / Value Store存储配置数据，每个键包含一个以斜杠（“/”）分隔的命名空间，例如“/config/core-metadata/server.port”指定端口核心元数据微服务的数量。本节定义键的命名约定。 所有配置密钥都应存储在命名空间“/ config”下，然后将微服务ID存储为第二级命名空间。当微服务部署到不同的运行时环境时，通常一些配置细节会有所不同。例如，数据库连接的细节在开发环境中通常与在质量保证环境中不同，并且在生产环境中不同。基于配置文件的配置可以解决此问题。 配置文件是一种条件配置，其中根据运行时活动的配置文件使用或忽略不同的配置设置。如果微服务利用基于配置文件的配置，则配置文件名称应附加到冒号（“;”）的第二级命名空间。例如：当EdgeXFoundry微服务放在Docker容器中进行部署时，配置文件用于提供特定于Docker环境的配置（例如config / core-metadata; docker）。名为“/ config / application”的特殊全局命名空间适用于使用Configuration微服务的所有微服务，并且所有全局级配置数据都可以放在此全局命名空间下，例如“/config/application/logging.level”和“ /config/application/logging.path”。 例如，ID为“testApp”且带有“dev”配置文件的微服务会加载以下命名空间： 最具体的配置数据在顶部作为最高优先级，反之则优先级最低。/ config / application命名空间中的配置数据适用于使用Configuration微服务的所有微服务。/ config / testApp命名空间中的配置数据仅适用于名为“testApp”的微服务实例。下表显示了此示例中Key / Value Store中的每个配置数据:在此示例中应采用以粗体突出显示的值，因为优先级值较高将覆盖较低优先级值的配置。 2.2 全局级别配置 ( Global Level Configuration )下表定义了全局配置数据，并且所有微服务都必须加载并使用此规则。 2.3 服务水平配置 (Service Level Configuration)下表定义了每个微服务应遵循的一些特殊配置。 3. 注册表 ( Registry )Registry的目标是使微服务能够相互查找和通信。当每个微服务启动时，它会将自己注册到注册表，并且注册表会定期继续检查其可用性。当一个微服务需要连接到另一个微服务时，它连接到Registry以检索目标微服务的可用主机名和端口号，然后调用目标微服务。下图显示了基本流程。 物理上，“注册表”和“配置”管理服务在同一个Consul服务器节点上组合并运行。 参考资料：Core Services Layer - Configuration and Registry]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EdgeX Foundry - Introduction]]></title>
    <url>%2F2018%2F09%2F11%2FEdgeX-01-Introduction%2F</url>
    <content type="text"><![CDATA[EdgeX Foundry官方文档笔记Part-1： “南向”与“北向”名词解释 EdgeX Foundry - 架构原则 EdgeX Foundry - 服务层简介 - Part1 Introduce1. “南向”与”北向” 南向(South Side): 物理领域内的所有物联网对象，以及与这些设备、传感器、执行器和其他物联网对象直接通信的网络边缘，以及从这些对象中收集数据的对象，统称为“南侧”。 South Side: All IoT objects, within the physical realm, and the edge of the network that communicates directly with those devices, sensors, actuators, and other IoT objects, and collects the data from them, is known collectively as the “South Side.” 北向(North Side): 将数据收集、存储、聚合、分析和转换为信息的云端（或企业系统）以及与云端通信的网络部分，称为网络的“北侧”。 North Side: The Cloud (or Enterprise system) where data is collected, stored, aggregated, analyzed, and turned into information, and the part of the network that communicates with the Cloud, is referred to as the “north side” of the network. EdgeX可以根据需要和指示将数据向“北”，“南”或横向发送。 EdgeX enables data to be sent “north,” “south,” or laterally as needed and as directed. 2. EdgeX Foundry - 架构原则 EdgeX Foundry必须与平台无关 EdgeX Foundry must be platform agnostic with regard to EdgeX Foundry必须非常灵活 EdgeX Foundry must be extremely flexible EdgeX Foundry必须提供存储和转发功能（以支持断开连接/远程边缘系统） EdgeX Foundry必须支持并促进“智能”靠近边缘以便解决 EdgeX Foundry must provide for store and forward capability (to support disconnected/remote edge systems) EdgeX Foundry must support and facilitate “intelligence” moving closer to the edge in order to address EdgeX Foundry必须支持旧式和新式设备/传感器现场部署 EdgeX Foundry必须安全且易于管理 EdgeX Foundry must support brown and green device/sensor field deployments EdgeX Foundry must be secure and easily managed 3. EdgeX Foundry - 服务层简介EdgeX Foundry是一个开源微服务的集合。这些微服务由4个服务层和2个基础增强系统服务所组成。The Service Layers traverse from the edge of the physical realm from the Device Services Layer, to the edge of the information realm of the Export Services Layer, with the Core Services Layer at the center. EdgeX Foundry is a collection of open source microservices. These microservices are organized into 4 service layers, and 2 underlying augmenting system services. EdgeX Foundry的4个服务层如下： 核心服务层 ( Core Services Layer ) 支持服务层 ( Supporting Services Layer ) 导出服务层 ( Export Services Layer ) 设备服务 ( Device Services Layer ) EdgeX Foundry的2个基础系统服务如下： 安全 ( Security ) 系统管理 ( System Management ) 图解： DEVICE SERVICES: （to south side） any combination of standard or proprietary protocols via sdk 通过sdk的任何标准或专有协议的组合 CORE SERVICES: all microservices intercommunicate via APIs (所有微服务都通过API进行相互通信) SUPPORTING SERVICES EXPORT SERVICES: choice of protocol （to north side） SERCURITY: sercurity services SYSTEM MANAGEMENT: device + system management 3.1 核心服务层 (CORE SERVICES LAYER)核心服务（CS）层将边缘处的北侧和南侧层分开。核心服务包括以下组件: The Core Services (CS) Layer separates the north side and south side layers at the edge. Core services include the following components: 核心数据：持久性存储库和相关的管理服务，用于从南侧对象收集的数据 Core data : a persistence repository and associated management service for data collected from the south side objects. 命令：促进和控制从北侧到南侧的致动请求的服务. Command: a service that facilitates and controls actuation requests from the north side to the south side. 元数据：有关连接到EdgeX Foundry的对象的元数据的存储库和关联管理服务。提供配置新设备并将其与其拥有的设备服务配对的功能。 Metadata : a repository and associated management service of metadata about the objects that are connected to EdgeX Foundry. Provides the capability to provision new devices and pair them with their owning device services. 注册和配置：为EdgeX Foundry中的其他EdgeX Foundry微服务提供有关相关服务的信息和微服务配置属性（即 - 初始化值的存储库） Registry and Configuration ： provides other EdgeX Foundry microservices with information about associated services within EdgeX Foundry and microservices configuration properties (i.e. - a repository of initialization values). 3.2 支持服务层( Supporting Services Layer )支持服务（SS）层包含各种微服务，可提供边缘分析和智能功能，并为EdgeX Foundry本身提供服务。正常的软件应用程序职责由SS层中的微服务执行，例如日志记录等。 规则引擎、警报和通知微服务都在SS层内，因为它们在核心服务层之上运行。本地分析功能（目前作为简单的规则引擎实现）也位于此层中。 The Supporting Services (SS) Layer encompass a wide range of microservices that provide the edge analytics and intelligence, and provide service to EdgeX Foundry itself. Normal software application duties such as logging, scheduling, and data clean up (scrubbing) are performed by microservices in the SS Layer. The rules engines, and alerting and notification microservices are within the SS Layer because they operate on top of the Core Services Layer. The local analytics capability (implemented today as a simple rules engine) is also located in this layer. 3.3 导出服务层 ( EXPORT SERVICES LAYER )必要时，EdgeX Foundry需要独立于其他系统运行。网关通常是处于隔离的( 有时是断开连接的环境中运行 ), 并监视和管理一组很少或没有外部监视或控制的设备。因此，EdgeX Foundry能够长时间运行和维持自身，而无需连接到“北侧”系统。应该经常收在边缘所产生的数据，并将其传输到云端。传输功能由导出服务（ES）层执行。 EdgeX Foundry operates independently of other systems when necessary. Gateways often operate in isolated and sometimes disconnected environments and monitor and manage a collection of sensors and devices that have little or no outside monitoring or control. Therefore, EdgeX Foundry is able to operate and sustain itself over long periods of time without connection to the “north side” systems. The data and intelligence that is created at the edge, should be collected often and transported to enterprise (cloud) systems. The transporting is performed by the Export Services (ES) Layer. ES Layer提供了一组执行以下活动的微服务： 允许非网关客户端注册感兴趣的南侧采集数据 通知何时何地传递数据 通知要传递数据的格式和形式 例如，“where and when”可以每小时将温度数据发送到REST地址，格式和形式可以是以压缩形式提供JSON数据。 The ES Layer provides a set of microservices that performs the following activities: Enables off-gateway clients to register for data that interests them, - coming from the south side objects Informs where and when the data is to be delivered Informs the format and shape in which that data is to be delivered For example, the “where and when” could be sending temperature data to a REST address every hour, and the format and shape could be to supply JSON data in compressed form. The Export Services Layer at this time, includes the following microservices: Client Registration Distribution Google IoT Core 3.4 设备服务层 ( DEVICE SERVICE LAYER )设备服务层与设备服务交互。 设备服务（DS）是与设备或物联网对象（“东西”）交互的边缘连接器，包括但不限于：家庭和办公楼中的报警系统、供暖和空调系统、灯、任何机器工业、灌溉系统、无人机、目前的自动化运输，如一些铁路系统、目前的自动化工厂，以及家中的电器。未来，这可能包括无人驾驶汽车和卡车、交通信号灯、全自动快餐设施、全自动自助杂货店、从患者那里获取医疗读数的设备等。 The Device Services Layer interacts with Device Services.Device Services (DS) are the edge connectors interacting with the Devices or IoT objects (the “things”) that include, but are not limited to: alarm systems, heating and air conditioning systems in homes and office buildings, lights, machines in any industry, irrigation systems, drones, currently automated transit such as some rail systems, currently automated factories, and appliances in your home. In the future, this may include driverless cars and trucks, traffic signals, fully automated fast food facilities, fully automated self-serve grocery stores, devices taking medical readings from patients etc. 设备服务可以一次为一个或多个设备（传感器，致动器等）提供服务。DS管理的“设备”可以是简单的单个物理设备以外的其他设备，也可以是另一个网关（以及所有该网关的设备); 设备管理员; 或者设备聚合器，充当EdgeX Foundry的设备或设备集合。 Device services may service one or a number of devices (sensor, actuator, and so forth) at one time. A “device” that a DS manages, could be something other than a simple single physical device and could be another gateway (and all of that gateway’s devices); a device manager; or a device aggregator that acts as a device, or collection of devices, to EdgeX Foundry. DS层的微服务通过每个IoT对象的本地协议与设备、传感器、执行器和其他物联网对象进行通信。DS层将IoT对象生成和传递的数据转换为通用EdgeX Foundry数据结构，并将转换后的数据发送到Core Services层，以及EdgeX Foundry其他层中的其他微服务。 Device services may service one or a number of devices (sensor, actuator, and so forth) at one time. A “device” that a DS manages, could be something other than a simple single physical device and could be another gateway (and all of that gateway’s devices); a device manager; or a device aggregator that acts as a device, or collection of devices, to EdgeX Foundry. EdgeX Foundry提供了一个设备服务软件开发工具包（SDK），用于生成设备服务的shell。它使新设备服务的创建更容易，并为核心服务层提供连接器代码。 此时EdgeX Foundry DS层包括以下微服务： 虚拟设备服务 BACnet设备服务 Modbus设备服务 SNMP设备服务 蓝牙低能量（BLE）设备服务 串口设备服务 设备服务的示例 BACnet DS将BACNet设备提供的温度和湿度读数转换为通用的EdgeX Foundry对象数据结构。 DS接收并转换来自其他EdgeX Foundry服务或企业系统的命令，并将这些请求传递给设备，以便以设备理解的编程语言进行激活。 DS可能会收到关闭Modbus PLC控制电机的请求。DS会将通用EdgeX Foundry“关闭”请求转换为Modbus串行命令，PLC控制电机可以通过该命令进行驱动。 The DS layer’s microservices communicate with the devices, sensors, actuators, and other IoT objects through protocols native to each IoT object. The DS Layer converts the data produced and communicated by the IoT object into a common EdgeX Foundry data structure, and sends that converted data into the Core Services layer, and to other microservices in other layers of EdgeX Foundry. EdgeX Foundry provides a device service software developer kit (SDK) for generating the shell of a device service. It makes the creation of new device services easier and provides connector code to the Core Services Layer. The EdgeX Foundry DS layer at this time, includes the following microservice: Virtual Device Service BACnet Device Service Modbus Device Service SNMP Device Service Blue Tooth Low Energy (BLE) Device Service Serial Device Service Examples of Device Services A BACnet DS converts the BACNet device-supplied temperature and humidity readings into a common EdgeX Foundry object data structure. A DS receives and translates commands from other EdgeX Foundry services or enterprise systems, and communicates those requests to the devices for actuation in a programming language that the device understands. A DS may receive a request to turn off a Modbus PLC-controlled motor. The DS would translate the generic EdgeX Foundry “shutoff” request into a Modbus serial command that the PLC-controlled motor understands for actuation. 3.5 系统服务层 ( SYSTEM SERVICES LAYER ) 安全基础设施 ( SECURITY INFRASTRUCTURE ):EdgeX Foundry内部和外部的安全元件能够保护EdgeX Foundry管理的设备、传感器和其他物联网对象的数据和命令的安全性。 Security elements both inside and outside of EdgeX Foundry protect the data and command of devices, sensors, and other IoT objects managed by EdgeX Foundry. 系统管理 ( SYSTEM MANAGEMENT ): 系统管理工具提供EdgeX Foundry微服务和BIOS固件、操作系统以及其他网关相关软件的安装、升级、启动、停止和监控，还可以从基于云端的远程系统支持这些功能。 System Management facilities provide the installation, upgrade, start, stop, and monitoring of EdgeX Foundry microservices and BIOS firmware, operating system, and other gateway-related software, and can also support these functions from off-box, enterprise-based systems.]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SupportingServices - Alerts&Notifications]]></title>
    <url>%2F2018%2F09%2F12%2FSupportingServices-AlertsAndNotifications%2F</url>
    <content type="text"><![CDATA[SupportingServices - Alerts&amp;Notifications： Introducion to Alert&amp;Notifications Data Model Data Dictionary High Level Interaction Diagrams Configuration Propertie Configure Mail Server 1. Introducion to Alert&amp;Notifications当需要通知另一个系统或某人时，以及需要通知另一个微服务在节点上发现的事情， Alert&amp;Notifications微服务能够提供这些信息。具体示例，其他服务可能需要广播，包括传感器数据超出范围（通常由Rules Engine服务检测到）或系统或服务故障（通常由System Management服务检测到）。 Notifications是提供信息的，而Alerts通常具有更重要、关键或紧急的性质，可能需要立即采取措施。 该图显示了Alerts and Notifications 的高级体系结构。在左侧，API是为其他微服务、机上应用程序和离线应用程序所提供，API可以是REST、AMQP、MQTT或任何标准应用程序协议。目前在EdgeX Foundry中，提供了RESTful接口。 在右侧，the notification receiver 可以是人，也可以是在云端或服务器中的应用系统。通过调用Subscription RESTful接口来订阅指定类型的通知。在事件发生时，the receiver 通过已定义的接收途径获得适当的通知。接收途径包括SMS消息，电子邮件，REST回调，AMQP，MQTT等。目前在EdgeX Foundry中，提供了电子邮件和REST回调的接收途径。 当Alerts and Notifications从任意接口接收通知时，通知将在内部传递给&lt;通知处理器&gt;Notifications Handler。 Notifications Handler首先会保留接收的通知，并将严重的通知立即传递给&lt;分发协调器&gt;Distribution Coordinator。对于正常通知，它们等待&lt;消息调度器&gt;Message Scheduler批量处理。 12severity =“CRITICAL” // 严重通知severity =“NORMAL” // 正常通知 Alerts and Notifications是可扩展的，添加更多的严重性描述，并设置相应的Message Schedulers来处理它们。例如，正常严重程度(normal severity)的通知每两小时触发一次Message Schedulers，次要严重性(minor severity)的通知每24小时触发一次(每天凌晨)。 当Distribution Coordinator接收到通知时，它首先查询订阅以获取需要获得该通知的接收者及其接收途径信息。根据接收途径信息，Distribution Coordinator将该通知传递给相应途径的发送者。然后，途径发送者将通知发送给订阅的接收者。 2. Data ModelMongoDB被选中用于Alerts and Notifications的持久化，因此数据模型设计没有外键并且基于文档结构的范例。 3. Data Dictionary 4. High Level Interaction Diagrams本节显示了有关Alerts and Notifications的一些更重要或复杂事件的序列图。 关键通知序列 Critical Notifications Sequence 当收到关键通知（ SEVERITY =“CRITICAL” ）时，它会先保存通知信息，并立即触发Distribution Process。更新通知状态后，Alerts and Notifications将响应客户端，以表示通知已接受。 正常通知序列 Normal Notifications Sequence 当收到正常通知（ SEVERITY =“NORMAL” ）时，它会先保存通知，并立即响应客户端以示通知已被接受。在经过某个持续时间段(可配置)之后，Message Scheduler将触发Distribution Pocess对其进行批量处理。 关键重发序列 Critical Resend Sequence 在发送关键通知期间遇到任何错误时，将安排单个重发任务，并且每个传输记录仍然存在。如果重发任务保持失败并且重发计数超过限制(可配置限制次数)，则会触发升级过程。升级的通知被发送到指定订阅的指定接收者（ slug =“ESCALATION” ）。 重新发送序列 Resend Sequence 对于其他非关键通知，重新发送操作由Resend Sceduler触发。 清理序列 Cleanup Sequence 清理服务删除旧的通知和传输记录。 5. Configuration Propertie (略，详情查看官方文档)默认配置文件位于源代码的/ src / main / resources文件夹中。 与Configuration Management微服务合作时，配置将位于Consul Key / Value Store中的/ config / iot-support-notifications名称空间下。 6. Configure Mail Server (略，详情查看官方文档)所有带有“spring.mail”前缀的属性都用于邮件服务器配置。 适当配置邮件服务器以发送警报和通知。 正确的值取决于使用的邮件服务器。 参考文献SupportingServices-Alerts&amp;Notifications]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SupportingServices - Logging]]></title>
    <url>%2F2018%2F09%2F12%2FSupportingServices-Logging%2F</url>
    <content type="text"><![CDATA[SupportingServices - Logging： Introducion to Logging Minimum Product Feature Set High Level Design Architecture Model Data Model Dictionary High Level Interaction Diagrams Configuration Propertie Logging Service Client Library for Java 1. Introduction to LoggingLogging对于所有现代软件应用程序至关重要。适当的日志记录能为用户提供以下好处： 能够监控和了解系统正在做什么 能够理解服务之间如何相互影响 能够检测到问题，并快速修复 提升性能 该图显示了EdgeX Foundry的高级设计架构，包括Logging Service。 2. Minimum Product Feature Set为其他微服务提供RESTful API，以请求具有以下特征的日志项： RESTful调用应该是非阻塞的，意味着调用服务直接触发日志请求，而不需要等待日志服务的任何响应，实现速度和服务性能影响的最小化 支持多个日志记录级别，例如trace、debug、info、warn、error、fatal等。 支持日志条目标记; 标签可以是调用服务所指示的任何内容。 每个日志条目都应与其发起服务相关联。 提供RESTful API，以根据以下参数的任意组合查询、删除或修改日志条目： Timestamp from Timestamp to Log level Tag Originating service (发起/起源服务) 日志项应保存在文件或数据库中，并且持久性存储应该在可配置级别的情况下进行管理 在内部利用现有的日志记录框架，EdgeX Foundry提供了“wrapper”供使用 尽可能遵循适用的日志记录标准，在网关上使用并不繁琐 3. High Level Design Architecture 上图显示了EdgeX Foundry Logging Service的高级体系结构，该服务使用Spring Boot Application Framework实现。其他微服务通过RESTful API与EdgeX Foundry Logging Service交互，以提交日志记录请求、查询历史日志记录以及删除历史日志记录。在内部，EdgeX Foundry Logging Service利用LOGBack作为其底层日志记录框架。EdgeX Foundry Logging Service支持两种可配置的持久性选项：文件或MongoDB。 4. Data Model 5. Data Dictionary 6. High Level Interaction Diagrams本节显示EdgeX Foundry Logging Service的序列图. Sequence Diagram for Logging Request Sequence Diagram for Query Historical Logging Sequence Diagram for Removing Historical Logging 7. Configuration Properties(略，详情参见官方文档)默认配置文件位于源代码的/ src / main / resources文件夹中。与Configuration Management微服务交互时，配置位于Consul Key / Value Store的/ config / support-logging名称空间中。 8. Logging Service Client Library for Java(略，详情参见官方文档)由于大多数EdgeX Foundry微服务都是用Java实现的，因此我们提供了Java客户端库，以便基于Java的微服务可以直接切换其Logger以使用EdgeX Foundry Logging Service。]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SupportingServices - RulesEngine]]></title>
    <url>%2F2018%2F09%2F12%2FSupportingServices-RulesEngine%2F</url>
    <content type="text"><![CDATA[SupportingServices - RulesEngine： Refrence Implementation Rules Engine as Export Service Client Rules Engine Direct Connect to Core Data Rules Client and High Level Interaction Diagram Rules (Defined), and Data Model Rules Engine Configuration Data Dictionary 1. Refrence ImplementationRules Engine微服务提供了参考实现，边缘事件触发机制。Rules Engine服务能够监控传入的传感器或设备数据(监控数据是否处于目标范围内)，以及触发设备即时驱动。因此，Rules Engine在网络边缘处或附近提供“智能”，以获得更快的响应时间。 该实现使用Drools（https://www.drools.org/）规则引擎作为核心。Drools是JBoss社区提供的开源规则引擎。这种微服务可以被第三方提供的许多其他边缘分析功能替换或扩充。 2. Rules Engine as Export Service Client参考实现Rules Engine为一种自动导出服务客户端。当服务启动时，它会自动调用Export Client Registration microservice，将自身注册为来自Core Data的所有设备和传感器读书数据的客户端。作为Export Service客户端，参考实现rules engine通过Export Distribution微服务接收所有事件和数据。基于数据而言，参考实现rules engine监视通过Export Distribution微服务接收的每个事件和数据，并且rules engine 通过Core Command微服务触发对设备的动作（其随后通过Device Services 传送请求与实际设备通信）。 3. Rules Engine Direct Connect to Core Data在对时间非常敏感的用例或环境中，连接的“对象”正在生成大量数据。因此，将Rules Engine微服务与Core Data的数据直接相连也是合适的。也就是说，不在通过Export Servies，直接调用Rule Engine Service。 rules engine已针对此选项进行了编程。默认情况下，rules engine 微服务将自身注册为export service的客户端。可以关闭此自动注册，并且规则引擎可以直接连接到Core Data的ZeroMQ发布数据。注意：由于Core Data中的ZeroMQ管道是一种发布 - 订阅机制，它允许多个订阅者。当规则引擎作为订阅者连接时，Core Data实际上同时发布给两个客户端或订阅者：Export Services和Rules Engine。为了将规则引擎与导出服务（作为客户端）断开连接并将其直接连接到Core Data，必须更改以下规则引擎微服务配置参数（在application.properties中找到）： 123export.client=true # this is normally false by default and is the indication to the Rules Engine micro service to register itself with the Export Servicesexport.zeromq.port=5563 # this port is set to 5566 when connecting to the ZeroMQ pipe out of Export Services.export.zeromq.host=tcp://[core data host] # this is set to the export distro host when connecting to the ZeroMQ pipe out of Export Services 4. Rules Client and High Level Interaction DiagramRules Engine微服务附带一个RESTful服务，可以添加和删除新规则。RESTful API允许将在JSON中定义的新规则动态添加到规则引擎（通过REST POST）。提供的JSON数据由微服务转换为Drools规则文件（.drl文件）。每个规则都必须与用于标识规则的唯一名称相关联，Drool文件包含此标识符。同时，也允许请求通过名称删除规则。 注意：由于Drools中的问题，删除的规则仅清空其内容。规则的名称（以及代表它的文件）仍在系统中。因此，在rule engine微服务停止并且物理删除空Drool文件之前，不能重用规则名称。 5. Rules (Defined), and Data ModelRules Engine微服务直接通过REST API或间接使用客户端UI提供规则。 规则由4部分定义：name，log entry，condition 和 action。 name 该名称唯一标识规则。 log entry 日志条目或简称日志是，在满足规则条件并触发操作时，发送到日志的文本。 condition 该条件指定要监控的数据（来自通过Export Services 提供的事件/数据）。具体而言，规则的条件元素指定要监视设备的设备ID或名称，并完成值检查（或简单地“检查”），即对该设备上收集的传感器值检验。设备ID或名称必须与Core Data 发送到Export Service 的Event对象中指定的设备ID或名称匹配，然后转发规则引擎服务（通过ZeroMQ）。 值检查需指定监控传感器的参数，测试以应用于该参数。ValueCheck参数必须与CoreData提供的事件关联的读取名称之一匹配（并且也是合法的ValueDescriptor名称）。例如，在恒温器传感器上，Reading可能会报告当前温度。因此，读取名称将是“temperature”，并且为了规则，测试来自该传感器读数的数据，对同一设备的值检查也必须包含“温度”参数。operand1、operation和operand2必须在参数范围指定一个等式，以此决定是否触发行为。例如， 1234567parameter: temperatureoperand1: valueoperation: &gt;operand2: 72 因为事件读取中的数据可以以字符串形式存在，ValueCheck operands 可以且应该使用Java语法指定，以创建用于比较的适当类型数据。如果温度读数在Core Data中表示为字符串，则相同的ValueCheck将指定如下： 1234567parameter: temperatureoperand1: Integer.parseInt(value)operation: &gt;operand2: 72 最后，规则中的行为需指定: 在指定的设备或传感器上触发哪个命令，以及将哪些数据或参数发送到设备。实际调用是通过REST形式的Core Command微服务完成的。因此，该操作必须指定以下项： 要调用的设备标识符(per Metadata) 要对设备执行的命令标识符(per Metadata) 将数据作为Command调用的一部分进行提供 因此，作为调用的一部分提供的数据是要在Command POST调用的主体中提供的JSON数据。action属性的示例如下： device：56325f7ee4b05eaae5a89ce1（元数据中设备或传感器的标识符） command：56325f6de4b05eaae5a89cdc（每个元数据与设备关联的命令ID） body：{“value”：“3”}（REST消息体中提供的JSON数据）。 在JSON中创建规则以通过规则引擎客户端提交POST时，整个规则将表示如下所示： 1&#123;&quot;name&quot;:&quot;motortoofastsignal&quot;, &quot;condition&quot;: &#123;&quot;device&quot;:&quot;562114e9e4b0385849b96cd8&quot;,&quot;checks&quot;:[ &#123;&quot;parameter&quot;:&quot;RPM&quot;, &quot;operand1&quot;:&quot;Integer.parseInt(value)&quot;, &quot;operation&quot;:&quot;&gt;&quot;,&quot;operand2&quot;:&quot;1200&quot; &#125; ] &#125;, &quot;action&quot; : &#123;&quot;device&quot;:&quot;56325f7ee4b05eaae5a89ce1&quot;,&quot;command&quot;:&quot;56325f6de4b05eaae5a89cdc&quot;,&quot;body&quot;:&quot;&#123;\\\&quot;value\\\&quot;:\\\&quot;3\\\&quot;&#125;&quot;&#125;,&quot;log&quot;:&quot;Patlite warning triggered for engine speed too high&quot; &#125; 6. Rules Engine ConfigurationSupportingServices-RulesEngine 7. Data Dictionary 参考文献SupportingServices-RulesEngine]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SupportingServices - Scheduling]]></title>
    <url>%2F2018%2F09%2F12%2FSupportingServices-Scheduling%2F</url>
    <content type="text"><![CDATA[SupportingServices - SchedulingScheduling： Introducion to Scheduling Model Dictionary 1. Introduction to SchedulingScheduling微服务包括Scrubber微服务，它可以删除事件以及已经导出到网关的读取数据（for Core Data）。或者，Scrubber微服务也可以配置为删除尚未导出的陈旧事件/读取数据。删除陈旧事件/读取数据使网关能够继续以静态存储量运行，保证系统继续从设备和传感器收集新数据。这样能够防止导出设施无法运行或运行速度不足时，也能保证数据收集正常进行。 可通过配置计划的时间间隔，以此删除导出的记录和过时记录。默认情况下，Scrubber每30分钟清理一次数据。 Scrubber微服务不会直接从EdgeX Foundry的持久存储本身中删除数据，而是调用Core Data来删除记录。Core Data作为持久事件/读取数据的单一访问点。Scrubber微服务是一项独立的服务，没有任何客户。也就是说，没有API可以调用Scrubber,由定时触发。 2. Data Dictionary]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Core Services Layer - Command]]></title>
    <url>%2F2018%2F09%2F12%2FCoreServices-Command%2F</url>
    <content type="text"><![CDATA[Core Services Layer - Command： Introduction to Command Data Dictionary High Level Interaction Diagrams 1. Introduction to Command核心服务层微服务命令(Command)（通常称为命令和控制微服务）允许代表以下方式向设备和传感器发出命令或操作： EdgeX Foundry中的其他微服务（例如，本地边缘分析或规则引擎微服务） 与EdgeX Foundry在同一系统上的其他应用程序（例如，系统管理agent关闭一个设备） 外部系统命令（例如，修改一系列设备设置文件） Command微服务以通用且标准化方式暴露命令指令，以简化与设备的通信。通过命令GET，对设备发出命令，请求设备与传感器的数据;通过命令PUT，对设备和传感器下发action或配置数据。Command微服务通过Device Service 同设备交互，不直接交互设备。 Command微服务从Metadata服务获得有关设备和传感器的信息。Command服务始终通过Device Service 将命令和操作下发到设备和传感器，并且永远不会直接与设备或传感器通信。因此，Command微服务是从EdgeX Foundry北侧（例如rules engine和export facilities）到特定协议的设备或传感器，以及与EdgeX Foundry的相关设备服务端和网关。 Command服务不允许通过Device Service与设备和传感器进行不必要的交互，从而为设备和传感器提供一层保护。 2. Data Dictionary 3. High Level Interaction Diagrams以下两个高级图表显示： EdgeX Foundry命令PUT请求 EdgeX Foundry命令请求设备及其可用命令(GET)]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Core Services Layer - Metadata]]></title>
    <url>%2F2018%2F09%2F12%2FCoreServices-Metadata%2F</url>
    <content type="text"><![CDATA[Core Services Layer - Metadata： Introdction to Metadata Data Models Data Dictionary High Level Interaction Diagrams 1. Introdction to Metadata元数据微服务(The Metadata microservice)具有关于设备和传感器的信息以及如何使用其他服务（例如Core Data，Command等）与它们进行通信。 具体而言，Metadata 具有以下能力： 管理有关连接到EdgeX Foundry并由其处理的设备和传感器的信息 了解设备和传感器数据的类型和构成 了解如何命令设备和传感器 元数据不执行以下活动： 不执行且也不对设备和传感器的实际数据收集负责，这些数据由Device Services和Core Data负责 不执行且也不负责向设备和传感器发出命令，这些命令由Command和Device Services负责 有关设备的一般特性，它们提供的数据以及如何命令它们，记录于EdgeX Foundry中的设备配置文件( Device Profiles )。Device Profiles可以被视为设备类型或分类的模板。例如，BACnet恒温器的设备配置文件为BACnet恒温器提供了发送恒温器数据的一般特性，例如当前温度，以及哪些类型的命令或操作可以发送到BACnet恒温器，例如冷却点或加热点的设定。因此，Device Profiles是第一个必须能够存储或管理于本地持久化的Metadata服务元素，并提供给EdgeX Foundry的其他服务。 有关实际设备和传感器的数据是Metadata存储和管理的另一种信息。由EdgeX Foundry管理的每个特定设备和传感器必须在Metadata中注册，并具有与之关联的唯一ID。信息（例如设备或传感器的地址）与该标识符一起存储。每个设备和传感器也与Device Profiles相关联。此关联使Metadata能够将Device Profiles提供的通用知识应用于每个设备和传感器。例如，位于戴尔大楼CTO解决方案实验室的BACNet恒温器等特定设备，Metadata存储和管理有关Device Service的信息，这些Device Service充当EdgeX Foundry与实际设备和传感器的接口。 Device Service是在所选协议中与设备或传感器直接通信的其他微服务，并规范化数据信息，以及与EdgeX Foundry的其余设备或传感器进行通信。单个Device Service便于EdgeX Foundry与一个或多个实际设备或传感器之间的通信。通常，构建Device Service以通过特定协议与使用该协议的设备和传感器通信。例如，Modbus Device Service，便于所有类型的Modbus设备之间的通信，如电机控制器、接近传感器、恒温器、功率计等。 2. Data ModelsCoreServices-Metadata 3. Data DictionaryCoreServices-Metadata 4. High Level Interaction Diagrams关于元数据的一些更重要或复杂事件的序列图。 以下三个高级互动图显示： EdgeX Foundry Metadata添加新设备配置文件（配置新设备的步骤1） EdgeX Foundry Metadata添加新设备配置文件（配置新设备的步骤2） EdgeX Foundry元数据设备服务启动 元数据添加新设备配置文件（配置新设备的步骤1） 参考文献：CoreServices-Metadata]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Core Services Layer - Core Data]]></title>
    <url>%2F2018%2F09%2F12%2FCoreServices-CoreData%2F</url>
    <content type="text"><![CDATA[Core Services Layer - Core Data： Introduce to Core Data Core Services Microservices - Core Data “Streaming” Core Services Microservices - Data Model Core Services Microservices - Data Dictionary Core Services Microservices - High Level Interaction Diagrams 1. Introduce to Core Data核心数据微服务(Core Data Microservice)为设备和传感器收集的数据读数提供集中的持久化服务。用于收集设备和传感器数据的设备服务，通过调用Core Data服务将设备和传感器数据存储在边缘系统（例如网关）中，直到这些数据需要“向北”转移，再导出数据到云系统之中。 EdgeX Foundry内部以及可能位于EdgeX Foundry外部的其他服务（如计划服务）仅能通过Core Data服务访问存储在网关上的设备和传感器数据。核心数据在数据处于边缘时为设备和传感器收集的数据提供一定程度的安全性和保护。 Core Data使用REST API将数据存储和导出本地。将来，微服务可以扩展，以允许通过其他协议（如MQTT，AMQP等）访问数据。默认情况下，Core Data通过ZeroMQ将数据移动到Export Service层。Core Data微服务的备用配置允许数据通过MQTT分发到Export Services，但也需要安装ActiveMQ等代理。 规则引擎微服务(Rules Engine microservice)默认从Export Distribution微服务接收其数据。在关注延迟或容量的情况下，规则引擎微服务的备用配置允许它通过ZeroMQ直接从Core Data获取其数据（与Export Services相同，成为了第二个订阅ZeroMQ的微服务）。### 2. Core Data “Streaming”默认情况下，Core Data会保留发送给它所有收集的设备和传感器数据。但是，当数据太敏感而无法存储在边缘时，或者本地其他服务（例如，通过分析微服务）不需要边缘数据时，数据可以通过Core Data “Streaming”，而不需要存储。 1persist.data = false 对Core Data( persist.data = false )的配置更改，使Core Data通过消息队列将数据发送到Export Service，而不在本地保存数据。此选项的优点是减少延迟通过Core Data的时延和边缘侧的存储需求，但代价是在边缘侧没有历史数据可用于基于随时间变化的操作等。 This option has the advantage of reducing latency through this layer and storage needs at the network edge, but the cost is having no historical data to use for operations based on changes over time, and only minimal device actuation decisions, based on single event data, at the edge. 3. Data Model下图显示了核心数据的数据模型。 4. Data Dictionary 5. High Level Interaction Diagrams以下两个高级互动图显示： EdgeX Foundry核心数据添加设备或传感器读数EdgeX Foundry核心数据请求事件读取或设备数据 Core Data 添加设备或传感器数据 Core Data 请求事件读取或设备数据 参考文献 [1] EdgeX Foundry核心微服务-Core Data]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Core Services Layer - Configuration and Registry]]></title>
    <url>%2F2018%2F09%2F11%2FCoreServicesLayer-ConfigurationAndRegistry%2F</url>
    <content type="text"><![CDATA[Core Services Layer - Configuration and Registry： Introduce to Configuration and Registry Core Services Microservices - Configuration Core Services Microservices - Registry 1. Introduce to Configuration and Registry配置和注册表的微服务提供集中式（即EdgeX Foundry-wide）管理 任何EdgeX Foundry微服务的配置和操作参数 EdgeX Foundry微服务的位置和状态 作为配置管理器，配置和注册表微服务在微服务启动时为每个微服务提供配置信息。此配置信息会覆盖微服务可能具有的任何内置配置，并提供满足微服务架构动态特性的方法。例如，配置和注册表微服务提供的配置信息可能会为另一个EdgeX Foundry微服务提供一个新的操作端口号，由于其默认端口号已被运行EdgeX Foundry的系统使用。配置和注册表微服务还提供了向EdgeX Foundry微服务通知配置更改的方法。这允许其他微服务动态地响应环境的变化。 作为EdgeX Foundry微服务注册表，配置和注册表微服务知道所有EdgeX Foundry微服务的位置和运行状态。当每个EdgeX Foundry微服务启动时，它被要求使用配置和注册表微服务注册自己。然后，配置和注册表微服务定期“ping”其他微服务，以准确了解微服务集合的健康状况。这为其他EdgeX Foundry微服务、系统管理系统和第三方应用程序提供了一个具有权威性的地方去获得EdgeX Foundry状态。 EdgeX Foundry微服务可以在没有配置和注册表微服务的情况下运行。当他们这样做时，他们使用内置配置初始化/配置自己并在本地而不是全局操作 - 也就是说，他们不会在任何中央机构或其他微服务中注册它们。如果没有配置和注册表微服务，每个其他微服务只能对位置（通过其自身的本地初始化提供）和其他微服务的运行状态做出假设。 2. 配置 ( Configuration )对于Configuration，Configuration and Registry微服务集中并简化了不断增长的服务配置数据。Configuration微服务以开源服务Consul为基础，提供Key和Value Store，客户可以通过RESTful API访问EdgeX Foundry。 有关更多信息，请参阅Consul官方网站：https： //www.consul.io 当每个微服务启动时，会发生一个特殊的“引导”阶段，以便加载自己的配置数据。在“引导”阶段，客户端微服务尝试通过RESTful API访问配置微服务，并遵循命名约定来检索自己的配置数据。此外，客户端微服务在本地准备默认配置文件。如果由于任何错误而无法访问配置微服务，则客户端微服务会不断重试。当Configuration微服务不可用时，客户端微服务无法启动并报告错误消息。 物理上，“配置”服务和“注册表”服务在同一个Consul服务器节点上组合并运行。 2.1 命名约定 ( Naming Convention ) 键/值存储 Configuration微服务利用Consul提供的Key / Value Store存储配置数据，每个键包含一个以斜杠（“/”）分隔的命名空间，例如“/config/core-metadata/server.port”指定端口核心元数据微服务的数量。本节定义键的命名约定。 所有配置密钥都应存储在命名空间“/ config”下，然后将微服务ID存储为第二级命名空间。当微服务部署到不同的运行时环境时，通常一些配置细节会有所不同。例如，数据库连接的细节在开发环境中通常与在质量保证环境中不同，并且在生产环境中不同。基于配置文件的配置可以解决此问题。 配置文件是一种条件配置，其中根据运行时活动的配置文件使用或忽略不同的配置设置。如果微服务利用基于配置文件的配置，则配置文件名称应附加到冒号（“;”）的第二级命名空间。例如：当EdgeXFoundry微服务放在Docker容器中进行部署时，配置文件用于提供特定于Docker环境的配置（例如config / core-metadata; docker）。名为“/ config / application”的特殊全局命名空间适用于使用Configuration微服务的所有微服务，并且所有全局级配置数据都可以放在此全局命名空间下，例如“/config/application/logging.level”和“ /config/application/logging.path”。 例如，ID为“testApp”且带有“dev”配置文件的微服务会加载以下命名空间： 最具体的配置数据在顶部作为最高优先级，反之则优先级最低。/ config / application命名空间中的配置数据适用于使用Configuration微服务的所有微服务。/ config / testApp命名空间中的配置数据仅适用于名为“testApp”的微服务实例。下表显示了此示例中Key / Value Store中的每个配置数据:在此示例中应采用以粗体突出显示的值，因为优先级值较高将覆盖较低优先级值的配置。 2.2 全局级别配置 ( Global Level Configuration )下表定义了全局配置数据，并且所有微服务都必须加载并使用此规则。 2.3 服务水平配置 (Service Level Configuration)下表定义了每个微服务应遵循的一些特殊配置。 3. 注册表 ( Registry )Registry的目标是使微服务能够相互查找和通信。当每个微服务启动时，它会将自己注册到注册表，并且注册表会定期继续检查其可用性。当一个微服务需要连接到另一个微服务时，它连接到Registry以检索目标微服务的可用主机名和端口号，然后调用目标微服务。下图显示了基本流程。 物理上，“注册表”和“配置”管理服务在同一个Consul服务器节点上组合并运行。 参考资料：Core Services Layer - Configuration and Registry]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EdgeX Foundry - Introduction]]></title>
    <url>%2F2018%2F09%2F11%2FEdgeX-Introduction%2F</url>
    <content type="text"><![CDATA[EdgeX Foundry - Introduction： “南向”与“北向”名词解释 EdgeX Foundry - 架构原则 EdgeX Foundry - 服务层简介 - Part1 Introduce1. “南向”与”北向” 南向(South Side): 物理领域内的所有物联网对象，以及与这些设备、传感器、执行器和其他物联网对象直接通信的网络边缘，以及从这些对象中收集数据的对象，统称为“南侧”。 South Side: All IoT objects, within the physical realm, and the edge of the network that communicates directly with those devices, sensors, actuators, and other IoT objects, and collects the data from them, is known collectively as the “South Side.” 北向(North Side): 将数据收集、存储、聚合、分析和转换为信息的云端（或企业系统）以及与云端通信的网络部分，称为网络的“北侧”。 North Side: The Cloud (or Enterprise system) where data is collected, stored, aggregated, analyzed, and turned into information, and the part of the network that communicates with the Cloud, is referred to as the “north side” of the network. EdgeX可以根据需要和指示将数据向“北”，“南”或横向发送。 EdgeX enables data to be sent “north,” “south,” or laterally as needed and as directed. 2. EdgeX Foundry - 架构原则 EdgeX Foundry必须与平台无关 EdgeX Foundry must be platform agnostic with regard to EdgeX Foundry必须非常灵活 EdgeX Foundry must be extremely flexible EdgeX Foundry必须提供存储和转发功能（以支持断开连接/远程边缘系统） EdgeX Foundry必须支持并促进“智能”靠近边缘以便解决 EdgeX Foundry must provide for store and forward capability (to support disconnected/remote edge systems) EdgeX Foundry must support and facilitate “intelligence” moving closer to the edge in order to address EdgeX Foundry必须支持旧式和新式设备/传感器现场部署 EdgeX Foundry必须安全且易于管理 EdgeX Foundry must support brown and green device/sensor field deployments EdgeX Foundry must be secure and easily managed 3. EdgeX Foundry - 服务层简介EdgeX Foundry是一个开源微服务的集合。这些微服务由4个服务层和2个基础增强系统服务所组成。The Service Layers traverse from the edge of the physical realm from the Device Services Layer, to the edge of the information realm of the Export Services Layer, with the Core Services Layer at the center. EdgeX Foundry is a collection of open source microservices. These microservices are organized into 4 service layers, and 2 underlying augmenting system services. EdgeX Foundry的4个服务层如下： 核心服务层 ( Core Services Layer ) 支持服务层 ( Supporting Services Layer ) 导出服务层 ( Export Services Layer ) 设备服务 ( Device Services Layer ) EdgeX Foundry的2个基础系统服务如下： 安全 ( Security ) 系统管理 ( System Management ) 图解： DEVICE SERVICES: （to south side） any combination of standard or proprietary protocols via sdk 通过sdk的任何标准或专有协议的组合 CORE SERVICES: all microservices intercommunicate via APIs (所有微服务都通过API进行相互通信) SUPPORTING SERVICES EXPORT SERVICES: choice of protocol （to north side） SERCURITY: sercurity services SYSTEM MANAGEMENT: device + system management 3.1 核心服务层 (CORE SERVICES LAYER)核心服务（CS）层将边缘处的北侧和南侧层分开。核心服务包括以下组件: The Core Services (CS) Layer separates the north side and south side layers at the edge. Core services include the following components: 核心数据：持久性存储库和相关的管理服务，用于从南侧对象收集的数据 Core data : a persistence repository and associated management service for data collected from the south side objects. 命令：促进和控制从北侧到南侧的致动请求的服务. Command: a service that facilitates and controls actuation requests from the north side to the south side. 元数据：有关连接到EdgeX Foundry的对象的元数据的存储库和关联管理服务。提供配置新设备并将其与其拥有的设备服务配对的功能。 Metadata : a repository and associated management service of metadata about the objects that are connected to EdgeX Foundry. Provides the capability to provision new devices and pair them with their owning device services. 注册和配置：为EdgeX Foundry中的其他EdgeX Foundry微服务提供有关相关服务的信息和微服务配置属性（即 - 初始化值的存储库） Registry and Configuration ： provides other EdgeX Foundry microservices with information about associated services within EdgeX Foundry and microservices configuration properties (i.e. - a repository of initialization values). 3.2 支持服务层( Supporting Services Layer )支持服务（SS）层包含各种微服务，可提供边缘分析和智能功能，并为EdgeX Foundry本身提供服务。正常的软件应用程序职责由SS层中的微服务执行，例如日志记录等。 规则引擎、警报和通知微服务都在SS层内，因为它们在核心服务层之上运行。本地分析功能（目前作为简单的规则引擎实现）也位于此层中。 The Supporting Services (SS) Layer encompass a wide range of microservices that provide the edge analytics and intelligence, and provide service to EdgeX Foundry itself. Normal software application duties such as logging, scheduling, and data clean up (scrubbing) are performed by microservices in the SS Layer. The rules engines, and alerting and notification microservices are within the SS Layer because they operate on top of the Core Services Layer. The local analytics capability (implemented today as a simple rules engine) is also located in this layer. 3.3 导出服务层 ( EXPORT SERVICES LAYER )必要时，EdgeX Foundry需要独立于其他系统运行。网关通常是处于隔离的( 有时是断开连接的环境中运行 ), 并监视和管理一组很少或没有外部监视或控制的设备。因此，EdgeX Foundry能够长时间运行和维持自身，而无需连接到“北侧”系统。应该经常收在边缘所产生的数据，并将其传输到云端。传输功能由导出服务（ES）层执行。 EdgeX Foundry operates independently of other systems when necessary. Gateways often operate in isolated and sometimes disconnected environments and monitor and manage a collection of sensors and devices that have little or no outside monitoring or control. Therefore, EdgeX Foundry is able to operate and sustain itself over long periods of time without connection to the “north side” systems. The data and intelligence that is created at the edge, should be collected often and transported to enterprise (cloud) systems. The transporting is performed by the Export Services (ES) Layer. ES Layer提供了一组执行以下活动的微服务： 允许非网关客户端注册感兴趣的南侧采集数据 通知何时何地传递数据 通知要传递数据的格式和形式 例如，“where and when”可以每小时将温度数据发送到REST地址，格式和形式可以是以压缩形式提供JSON数据。 The ES Layer provides a set of microservices that performs the following activities: Enables off-gateway clients to register for data that interests them, - coming from the south side objects Informs where and when the data is to be delivered Informs the format and shape in which that data is to be delivered For example, the “where and when” could be sending temperature data to a REST address every hour, and the format and shape could be to supply JSON data in compressed form. The Export Services Layer at this time, includes the following microservices: Client Registration Distribution Google IoT Core 3.4 设备服务层 ( DEVICE SERVICE LAYER )设备服务层与设备服务交互。 设备服务（DS）是与设备或物联网对象（“东西”）交互的边缘连接器，包括但不限于：家庭和办公楼中的报警系统、供暖和空调系统、灯、任何机器工业、灌溉系统、无人机、目前的自动化运输，如一些铁路系统、目前的自动化工厂，以及家中的电器。未来，这可能包括无人驾驶汽车和卡车、交通信号灯、全自动快餐设施、全自动自助杂货店、从患者那里获取医疗读数的设备等。 The Device Services Layer interacts with Device Services.Device Services (DS) are the edge connectors interacting with the Devices or IoT objects (the “things”) that include, but are not limited to: alarm systems, heating and air conditioning systems in homes and office buildings, lights, machines in any industry, irrigation systems, drones, currently automated transit such as some rail systems, currently automated factories, and appliances in your home. In the future, this may include driverless cars and trucks, traffic signals, fully automated fast food facilities, fully automated self-serve grocery stores, devices taking medical readings from patients etc. 设备服务可以一次为一个或多个设备（传感器，致动器等）提供服务。DS管理的“设备”可以是简单的单个物理设备以外的其他设备，也可以是另一个网关（以及所有该网关的设备); 设备管理员; 或者设备聚合器，充当EdgeX Foundry的设备或设备集合。 Device services may service one or a number of devices (sensor, actuator, and so forth) at one time. A “device” that a DS manages, could be something other than a simple single physical device and could be another gateway (and all of that gateway’s devices); a device manager; or a device aggregator that acts as a device, or collection of devices, to EdgeX Foundry. DS层的微服务通过每个IoT对象的本地协议与设备、传感器、执行器和其他物联网对象进行通信。DS层将IoT对象生成和传递的数据转换为通用EdgeX Foundry数据结构，并将转换后的数据发送到Core Services层，以及EdgeX Foundry其他层中的其他微服务。 Device services may service one or a number of devices (sensor, actuator, and so forth) at one time. A “device” that a DS manages, could be something other than a simple single physical device and could be another gateway (and all of that gateway’s devices); a device manager; or a device aggregator that acts as a device, or collection of devices, to EdgeX Foundry. EdgeX Foundry提供了一个设备服务软件开发工具包（SDK），用于生成设备服务的shell。它使新设备服务的创建更容易，并为核心服务层提供连接器代码。 此时EdgeX Foundry DS层包括以下微服务： 虚拟设备服务 BACnet设备服务 Modbus设备服务 SNMP设备服务 蓝牙低能量（BLE）设备服务 串口设备服务 设备服务的示例 BACnet DS将BACNet设备提供的温度和湿度读数转换为通用的EdgeX Foundry对象数据结构。 DS接收并转换来自其他EdgeX Foundry服务或企业系统的命令，并将这些请求传递给设备，以便以设备理解的编程语言进行激活。 DS可能会收到关闭Modbus PLC控制电机的请求。DS会将通用EdgeX Foundry“关闭”请求转换为Modbus串行命令，PLC控制电机可以通过该命令进行驱动。 The DS layer’s microservices communicate with the devices, sensors, actuators, and other IoT objects through protocols native to each IoT object. The DS Layer converts the data produced and communicated by the IoT object into a common EdgeX Foundry data structure, and sends that converted data into the Core Services layer, and to other microservices in other layers of EdgeX Foundry. EdgeX Foundry provides a device service software developer kit (SDK) for generating the shell of a device service. It makes the creation of new device services easier and provides connector code to the Core Services Layer. The EdgeX Foundry DS layer at this time, includes the following microservice: Virtual Device Service BACnet Device Service Modbus Device Service SNMP Device Service Blue Tooth Low Energy (BLE) Device Service Serial Device Service Examples of Device Services A BACnet DS converts the BACNet device-supplied temperature and humidity readings into a common EdgeX Foundry object data structure. A DS receives and translates commands from other EdgeX Foundry services or enterprise systems, and communicates those requests to the devices for actuation in a programming language that the device understands. A DS may receive a request to turn off a Modbus PLC-controlled motor. The DS would translate the generic EdgeX Foundry “shutoff” request into a Modbus serial command that the PLC-controlled motor understands for actuation. 3.5 系统服务层 ( SYSTEM SERVICES LAYER ) 安全基础设施 ( SECURITY INFRASTRUCTURE ):EdgeX Foundry内部和外部的安全元件能够保护EdgeX Foundry管理的设备、传感器和其他物联网对象的数据和命令的安全性。 Security elements both inside and outside of EdgeX Foundry protect the data and command of devices, sensors, and other IoT objects managed by EdgeX Foundry. 系统管理 ( SYSTEM MANAGEMENT ): 系统管理工具提供EdgeX Foundry微服务和BIOS固件、操作系统以及其他网关相关软件的安装、升级、启动、停止和监控，还可以从基于云端的远程系统支持这些功能。 System Management facilities provide the installation, upgrade, start, stop, and monitoring of EdgeX Foundry microservices and BIOS firmware, operating system, and other gateway-related software, and can also support these functions from off-box, enterprise-based systems.]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>EdgeX Foundry</tag>
      </tags>
  </entry>
</search>
